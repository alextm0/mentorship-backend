/*
 * Users: The central table for both mentors and students.
 * Role is checked to ensure data integrity.
*/
CREATE TABLE users (
   id UUID PRIMARY KEY,
   name VARCHAR(100) NOT NULL,
   email VARCHAR(100) NOT NULL UNIQUE,
   role VARCHAR(20) NOT NULL CHECK (role IN ('MENTOR', 'STUDENT', 'ADMIN')),
   created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
   updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

/*
 * Invitations: Tracks pending requests from mentors to students.
 * This is how the "linking" flow begins.
 * A secure token is used to accept the invite via email.
*/
CREATE TABLE invitations (
    /*
     * This ID is NOT auto-generated by this table.
     * It is the PRIMARY KEY from the auth provider (e.g., neon_auth.users_sync.id)
     * and is inserted by your application logic or a DB trigger.
    */
     id UUID PRIMARY KEY,
     mentor_id UUID NOT NULL,
     student_email VARCHAR(100) NOT NULL,
     status VARCHAR(20) NOT NULL DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'ACCEPTED', 'DECLINED')),
     token VARCHAR(255) NOT NULL UNIQUE, -- Secure, single-use token
     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

     CONSTRAINT fk_invitation_mentor FOREIGN KEY (mentor_id) REFERENCES users(id) ON DELETE CASCADE,
     CONSTRAINT uq_pending_invite UNIQUE (mentor_id, student_email, status)
);

/*
 * Mentorships: The official link, created *after* an invite is accepted.
 * This table enforces the MVP requirement of 1-to-1 mentoring.
*/
CREATE TABLE mentorships (
     id UUID PRIMARY KEY,
     mentor_id UUID NOT NULL,
     student_id UUID NOT NULL,
     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

     CONSTRAINT fk_mentor FOREIGN KEY (mentor_id) REFERENCES users(id) ON DELETE CASCADE,
     CONSTRAINT fk_student FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE,
     CONSTRAINT uq_mentor_student UNIQUE (mentor_id, student_id),
     CONSTRAINT uq_student UNIQUE (student_id) -- Ensures a student has only ONE mentor
);
